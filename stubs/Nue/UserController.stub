<?php

namespace App\Http\Controllers\Nue;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Str;

class UserController extends Controller
{
    /**
     * Title for current resource.
     *
     * @var string
     */
    protected $title;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct() 
    {
        $this->title = __('Users');

        $this->models = config('nue.database.users_model');
        $this->data = new $this->models;
        
        $this->prefix = 'users.users';
        $this->view = 'nue::users.users';

        $this->tCreate = __('Created', ['title' => $this->title]);
        $this->tUpdate = __('Updated', ['title' => $this->title]);
        $this->tDelete = __('Deleted', ['title' => $this->title]);

        view()->share([
            'title' => $this->title, 
            'view' => $this->view, 
            'prefix' => $this->prefix
        ]);
    }

    /**
     * Index interface.
     *
     * @param Request $request
     *
     * @return Content
     */
    public function index(Request $request)
    {
        $data = $this->data->query();

        if($request->has('datatable')):
            return $this->datatable($data);
        endif;

        return view("{$this->view}.index", compact('data'));
    }

    /**
     * Create interface.
     *
     * @param Request $request
     *
     * @return Content
     */
    public function create(Request $request)
    {
        $permissions = config('nue.database.permissions_model')::pluck('name', 'id');

        return view("$this->view.create", compact('permissions'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return mixed
     */
    public function store(Request $request)
    {
        $this->validate($request, [
            'photo' => 'mimes:jpg,jpeg,png', 
            'name' => 'required', 
            'email' => 'required|unique:users,email', 
            'password' => 'required|min:5',
            'password_confirmation' => 'required|same:password',
        ]);

        $input = $request->all();
        $input['password'] = bcrypt($request->password);
        $input['plain'] = encrypt($request->password);

        $user = $this->data->create($input);
        $user->roles()->sync($request->roles);
        $user->permissions()->sync($request->permissions);

        if (isset($input['photo'])) {
            $user->updateProfilePhoto($input['photo']);
        }
        
        notify()->flash($this->tCreate, 'success');
        return redirect(route("$this->prefix.index"));
    }

    /**
     * Show interface.
     *
     * @param mixed   $id
     * @param Request $request
     *
     * @return Content
     */
    public function show(Request $request, $id)
    {
        abort(404);
    }

    /**
     * Edit interface.
     *
     * @param mixed   $id
     * @param Request $request
     *
     * @return Content
     */
    public function edit(Request $request, $id)
    {
        $edit = $this->data->findOrFail($id);
     
        $permissions = config('nue.database.permissions_model')::pluck('name', 'id');

        return view("{$this->view}.edit", compact('edit', 'permissions'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $edit = $this->data->findOrFail($id);

        $this->validate($request, [
            'photo' => 'mimes:jpg,jpeg,png', 
            'name' => 'required', 
            'email' => 'required|unique:users,email,'.$edit->id, 
            'password_confirmation' => 'same:password',
        ]);

        $input = $request->all();

        $input['password'] = $request->filled('password') ? bcrypt($request->password) : $edit->password;
        $input['plain'] = $request->filled('password') ? encrypt($request->password) : $edit->plain;

        if (isset($input['photo'])) {
            $edit->updateProfilePhoto($input['photo']);
        }
        
        $edit->update($input);
        $edit->roles()->sync($request->roles);
        $edit->permissions()->sync($request->permissions);
        
        notify()->flash($this->tUpdate, 'success');
        return redirect(route("$this->prefix.index"));
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request, $id)
    {
        if($request->has('pilihan')):
            foreach($request->pilihan as $temp):
                $data = $this->data->findOrFail($temp);
                $data->delete();
            endforeach;
            
            notify()->flash($this->tDelete, 'success');
            return redirect()->back();
        endif;
    }

    /**
     * Datatable API
     * @param  $data
     * @return Datatable
     */
    public function datatable($data) 
    {
        return datatables()->of($data)
            ->editColumn('pilihan', function($data) {
                return '<div class="form-check mb-0">
                    <input type="checkbox" class="form-check-input pilihan" id="pilihan['.$data->id.']" name="pilihan[]" value="'.$data->id.'">
                        <label class="form-check-label" for="pilihan['.$data->id.']"></label>
                    </div>';
            })
            ->editColumn('roles', function($data) {
                $return = '';
                foreach($data->roles as $temp) {
                    $return .= '<label class="badge bg-soft-success text-success">
                        <span class="legend-indicator bg-success"></span>'.$temp->name.'
                    </label>';
                }
                return $return;
            })
            ->editColumn('password', function($data) {
                if(!is_null($data->plain)):
                    $plain = decrypt($data->plain);
                    return '<span data-bs-toggle="tooltip" data-bs-placement="top" title="'.$plain.'">
                        <i class="bi bi-shield-lock-fill"></i> &bullet;&bullet;&bullet;&bullet;&bullet;
                    </span>';
                endif;
            })
            ->editColumn('last_login_at', function($data) {
                if(!is_null($data['last_login_at'])):
                    return date('d/m/Y H:i A', strtotime($data->last_login_at));
                endif;
            })
            ->editColumn('action', function($data) {
                return '<a href="'.route("$this->prefix.edit", $data->id).'" class="btn btn-xs btn-info rounded-xs">
                        <i class="bi bi-pencil-square"></i>
                        '.__('Edit').'
                    </a>';
            })
            ->escapeColumns(['*'])->toJson();
    }
}